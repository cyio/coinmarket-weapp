<template>
  <view class="container">
    <view class="info" wx:if="{{!loading}}">
      <text>总市值：<text class="highlight">{{global.totalMarketCap}} </text></text>
      <text>BTC占比：<text class="highlight">{{global.bitcoin_percentage_of_market_cap}}% </text></text>
      <text>更新时间：<text class="highlight">{{global.lastUpdated}} </text></text>
    </view>
		<view class="table" wx:if="{{!loading}}">
      <view class="tr bg-w">
        <view class="th h-rank">排名</view>
        <view class="th h-name">名称</view>
        <view class="th h-price">最新价￥</view>
        <view class="th h-change">涨跌24H</view>
      </view>
      <block wx:for="{{tickers}}" wx:key="{{rank}}">
        <view class="tr {{ index % 2 ? 'bg-g' : ''}}">
          <view class="td h-rank">{{item.rank}}</view>
          <view class="td">{{item.symbol}}</view>
          <view class="td align-right">{{item.priceCny}}</view>
          <view class="td align-right {{item.percentChange24h >=0 ? 'up': 'down' }}">{{item.percentChange24h}}%</view>
        </view>
      </block>
    </view>
    <loading hidden="{{!loading}}">
      加载中...
    </loading>
  </view>
	<wxs module="util">
    var format = function(value)  {
      return Number(value).toFixed(2)
    }
    module.exports.format = format
	</wxs>
</template>

<script>
import wepy from 'wepy'
import AV from 'leancloud-storage/dist/av-weapp-min.js'
import leancloudConfig from '../leancloud.config.js'
AV.init(leancloudConfig)
import numeral from 'numeral'
import Timeago from 'timeago.js'
const timeAgo = new Timeago()
// import List from '../components/list'
// import testMixin from '../mixins/test'

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '币值轻快版'
  }
  components = {
  }

  // mixins = [testMixin]

  data = {
    tickers: null,
    global: null,
    loading: true,
    listData: [
      {
        'code': '01',
        'text': 'hello',
        'type': 'type1'
      },
      {
        'code': '01',
        'text': 'hello',
        'type': 'type1'
      },
      {
        'code': '01',
        'text': 'hello',
        'type': 'type1'
      }
    ]
  }

  computed = {
    now () {
      return +new Date()
    }
  }

  methods = {
    format (value, unit) {
      if (unit === 'btc') return numeral(value * 10 ** 6).format('0,000,000.00')
      return numeral(value).format('0,0.00')
    },
    timeFormat (time, locale) {
      return timeAgo.format(new Date(time * 1000), locale)
    },
    getData () {
      new AV.Query('Data')
        .get('5a5c5c71ac502e0042f62b60')
        .then(res => {
          console.log(res.id, res.get('content'))
          const data = res.get('content')
          this.global = {
            ...data.global,
            totalMarketCap: '¥' + numeral(data.global.total_market_cap_cny / (10 ** 8)).format('0,000.00') + '亿',
            lastUpdated: this.methods.timeFormat(data.global.last_updated, 'zh_CN')
          }
          this.tickers = data.tickers.map((ticker, index) => {
            return {
              ...ticker,
              priceCny: this.methods.format(ticker.price_cny, 'cny'),
              percentChange24h: this.methods.format(ticker.percent_change_24h)
            }
          })
          this.loading = false
          this.$apply()
        })
        .catch(console.error)
    }
  }

  events = {
  }

  onLoad() {
    new AV.Query('Data')
      .get('5a5c5c71ac502e0042f62b60')
      .then(res => {
        console.log(res.id, res.get('content'))
        const data = res.get('content')
        this.global = {
          ...data.global,
          totalMarketCap: '¥' + numeral(data.global.total_market_cap_cny / (10 ** 8)).format('0,000.00') + '亿',
          lastUpdated: this.methods.timeFormat(data.global.last_updated, 'zh_CN')
        }
        this.tickers = data.tickers.map((ticker, index) => {
          return {
            ...ticker,
            priceCny: this.methods.format(ticker.price_cny, 'cny'),
            percentChange24h: this.methods.format(ticker.percent_change_24h)
          }
        })
        this.loading = false
        this.$apply()
      })
      .catch(console.error)
  }

  onPullDownRefresh() {
    this.loading = true
    new AV.Query('Data')
      .get('5a5c5c71ac502e0042f62b60')
      .then(res => {
        wx.stopPullDownRefresh()
        console.log(res.id, res.get('content'))
        const data = res.get('content')
        this.global = {
          ...data.global,
          totalMarketCap: '¥' + numeral(data.global.total_market_cap_cny / (10 ** 8)).format('0,000.00') + '亿',
          lastUpdated: this.methods.timeFormat(data.global.last_updated, 'zh_CN')
        }
        this.tickers = data.tickers.map((ticker, index) => {
          return {
            ...ticker,
            priceCny: this.methods.format(ticker.price_cny, 'cny'),
            percentChange24h: this.methods.format(ticker.percent_change_24h)
          }
        })
        this.loading = false
        this.$apply()
      })
      .catch((e) => {
        console.error(e)
        wx.stopPullDownRefresh()
      })
  }
}
</script>

<style lang="stylus">
  theme = #32669a

  .table {
    width: 100%;
    border: 0px solid darkgray;
  }
  .tr {
    display: flex;
    width: 100%;
    justify-content: center;
    height: 2.5rem;
    align-items: center;
  }
  .td {
    width:40%;
    justify-content: center;
    text-indent: 1rem;
  }
  .bg-w{
    background: #e0e9f3;
  }
  .bg-g{
    background: #F5F5F5;
  }
  .th {
    width: 40%;
    justify-content: center;
    color: #000;
    display: flex;
    height: 3rem;
    align-items: center;
  }
  .info {
    margin-left: 10rpx;
    margin-bottom: 10rpx;
    font-size: 30rpx;
    color: #a2a2a2;
  }
  .info .highlight {
    color: theme
  }
  .table {
    white-space: nowrap;
  }
  .table th {
  }
  .table td, .table th {
    text-indent: .05rem;
  }
  .align-right {
    text-align: right;
    transform: translateX(-15%);
  }
  .headorder .f-left {
    text-align: left;
  }
  .item td {
  }
  .up {
    color: green;
  }
  .down {
    color: red;
  }
  .change {
    width: .5rem;
  }
  .h-rank {
    width: 15%;
  }
  .h-change {
  }
  .h-price {
  }
</style>
